- name: kubelet client certs directory
  tags: cert
  file:
    path: "{{ kubelet_client_certs_path }}/{{ item }}"
    state: directory
  with_items:      
    - "{{ groups['kubelet_client'] }}"

- name: kubelet client key
  tags: cert
  openssl_privatekey:
    path: "{{ kubelet_client_certs_path }}/{{ item }}/key.pem"
  with_items:      
    - "{{ groups['kubelet_client'] }}"

- name: kubelet client csr
  tags: cert
  openssl_csr:
    path: "{{ kubelet_client_certs_path }}/{{ item }}/cert.csr"
    privatekey_path: "{{ kubelet_client_certs_path }}/{{ item }}/key.pem"
    common_name: "{{ item }}"
  with_items:      
    - "{{ groups['kubelet_client'] }}"

- name: kbuelet client req extensions  
  template:
    src: extention.conf.j2
    dest: "{{ kubelet_client_certs_path }}/{{ item }}/extention.conf"
  with_items:      
    - "{{ groups['kubelet_client'] }}"

# this task will always generate new certs to cover previous certs
- name: kubelet client cert
  tags: cert
  shell: if [ -f {{ kubelet_client_certs_path }}/{{ item }}/cert.pem ];then exit;else openssl x509 -req -days 365 -in {{ kubelet_client_certs_path }}/{{ item }}/cert.csr -CA {{ ca_path }}/ca.pem  -CAkey {{ ca_path }}/key.pem -CAcreateserial -out {{ kubelet_client_certs_path }}/{{ item }}/cert.pem -extensions v3_ca -extfile {{ kubelet_client_certs_path }}/{{ item }}/extention.conf;fi
  with_items:      
    - "{{ groups['kubelet_client'] }}"
